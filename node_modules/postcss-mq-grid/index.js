var postcss = require('postcss');
var _ = require('lodash');

module.exports = postcss.plugin('mq-grid', () => {

    var opts = {
        gridClass: 'grid',
        width: 1280,
        gutter: 40,
        margin: 16,
        columns: 12,
        gridStart: 'tablet',
        gridCustom: null,
        columnClass: null
    };

    var breakpoints = {
        mobile: '320px',
        tablet: '481px',
        smalldesktop: '769px',
        desktop: '1024px',
        largedesktop: '1280px'
    };




    /**********************************************************
     * FUNCTIONS
     **********************************************************/

    const getGutterWidth = function getGutterWidth(gutter, width) {
        return (gutter / width) * 100; // %
    }

    const getMarginWidth = function getMarginWidth(margin, width) {
        return (((margin / 2) / width) * 100); // %
    }

    const getWidth = function getWidth(columnCount, totalColumns, margin) {
        const columnWidth = (100 - ((margin * 2) * totalColumns)) / totalColumns;
        return (columnCount * columnWidth) + ((margin * 2) * (columnCount - 1));
    }

    const calcColumns = function calcColumns(gridClass, columns, marginWidth) {
        var createColumns = '';
        for (var i = 1; i <= columns; i++) {
            // divide the number of columns into the increment number and look for a whole number
            var num = columns / i;
            var num2 = Math.round(columns / i);

            if (num === num2) {
                var string = `.col-1-${num}`;
            }

            createColumns += `
                .${gridClass} .col-${i}-${columns}, .${gridClass} ${string} {
                    width: ${getWidth(i, columns, marginWidth)}%
                }`;
        }
        return createColumns;
    }

    const calcResponsiveColumns = function calcResponsiveColumns(columnClass, margin, col) {
        return `.${columnClass} {
                    width: ${getWidth(1, col, margin)}
                }`;
    }


    /**********************************************************
     * GENERATE GRIDS
     **********************************************************/

    return (css) => {

        css.walkAtRules('mq-breakpoints', (createBreakpoints) => {

            createBreakpoints.walkDecls((decl) => {
                breakpoints[decl.prop] = decl.value;
            });

            //console.log(breakpoints);

        });

        css.walkAtRules('mq-create-grid', (createGrid) => {

            createGrid.walkDecls((decl) => {
                opts[decl.prop] = decl.value;
            });

            // Generate Grids
            const gridClass = opts.gridClass;
            const columnClass = opts.columnClass || null;
            const gridStart = opts.gridStart || null;
            const gridCustom = opts.gridCustom || null;
            const columns = Number(opts.columns);
            const width = Number(opts.width); // px
            const margin = Number(opts.margin); // px
            const gutter = Number(opts.gutter * 2); // px
            const structureWidth = width - gutter; // px
            const gutterWidth = getGutterWidth(gutter, width); // %
            const marginWidth = getMarginWidth(margin, structureWidth); // %
            const maxWidth = structureWidth + margin; // px

            var rootCss = postcss.root();

            rootCss.append(`
               .${gridClass} {
                    margin: 0 auto;
                    max-width: ${maxWidth}px;
                    width: ${(100 - gutterWidth) + (marginWidth * 2)}%;
                }


                .${gridClass}.no-cols {
                    max-width: ${structureWidth}px;
                    width: ${100 - gutterWidth}%;
                }

                .${gridClass}::after {
                    content: "";
                    display: table;
                    clear: both;
                }
            `);

            if (columns > 1) {

                if(!gridCustom) {

                    // ----------------------------------------------------
                    // TYPE STRUCTURE GRID
                    // ----------------------------------------------------

                    // all col elements 100%
                    rootCss.append(`
                        .${gridClass} [class*='col-'] {
                            margin: 0 ${marginWidth}% ${marginWidth*2}%;
                            width: ${getWidth(columns, columns, marginWidth)}%;
                        }

                        @media (min-width:${breakpoints[gridStart]}){
                            .${gridClass} [class*="col-"] {
                              float: left;
                            }

                            // Float Right
                            .${gridClass} .a-r {
                                float: right;
                            }

                            // Align Center
                            .${gridClass} .a-c {
                                float: none;
                                margin-left: auto;
                                margin-right: auto;
                            }

                            // Inline Block
                            .${gridClass}.i-b {
                                font-size: 0;
                            }

                            .${gridClass}.i-b [class*="col-"] {
                                float: none;
                                display: inline-block;
                                vertical-align: top;
                            }

                            ${calcColumns(gridClass, columns, marginWidth)}
                        }
                    `);

                }

                else {

                    // ----------------------------------------------------
                    // TYPE ADAPTIVE GRID
                    // ----------------------------------------------------

                    // Convert the custom grid into an object
                    var gridCustomRegex = gridCustom.match(/{([^]+?)}/);
                    var gridCustomObject = JSON.parse(gridCustomRegex[0]);

                    rootCss.append(`
                        .${columnClass} {
                            margin: 0 ${marginWidth}% ${marginWidth*2}%;
                            width: ${getWidth(columns, columns, marginWidth)}%;
                        }

                        // Float Right
                        .${gridClass} .a-r {
                            float: right;
                        }

                        // Align Center
                        .${gridClass} .a-c {
                            float: none;
                            margin-left: auto;
                            margin-right: auto;
                        }

                        // Inline Block
                        .${gridClass}.i-b {
                            font-size: 0;
                        }

                        .${gridClass}.i-b ${columnClass} {
                            float: none;
                            display: inline-block;
                            vertical-align: top;
                        }
                    `);

                    for (var prop in gridCustomObject) {
                        var breakpointName = prop;
                        var breakpointColumn = gridCustomObject[prop];

                        rootCss.append(`
                            @media (min-width:${breakpoints[breakpointName]}){

                                .${columnClass} {
                                  float: left;
                                  width: ${getWidth(1, breakpointColumn, marginWidth)}%;
                                }

                            }
                        `);
                    }
                }

            }

            createGrid.replaceWith(rootCss);
        });

    }

});